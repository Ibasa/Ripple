// This file is auto generated by GenerateDefinitions, do not edit by hand
using System;
using System.Buffers;
namespace Ibasa.Ripple.St
{
    /// <summary>
    /// The type of a transaction (TransactionType field) is the most fundamental information about a transaction.
    /// This indicates what type of operation the transaction is supposed to do.
    /// </summary>
    public enum StTransactionType : ushort
    {
        Invalid = 65535,
        Payment = 0,
        EscrowCreate = 1,
        EscrowFinish = 2,
        AccountSet = 3,
        EscrowCancel = 4,
        SetRegularKey = 5,
        NickNameSet = 6,
        OfferCreate = 7,
        OfferCancel = 8,
        Contract = 9,
        TicketCreate = 10,
        TicketCancel = 11,
        SignerListSet = 12,
        PaymentChannelCreate = 13,
        PaymentChannelFund = 14,
        PaymentChannelClaim = 15,
        CheckCreate = 16,
        CheckCash = 17,
        CheckCancel = 18,
        DepositPreauth = 19,
        TrustSet = 20,
        AccountDelete = 21,
        EnableAmendment = 100,
        SetFee = 101,
        UNLModify = 102,
    }

    /// <summary>
    /// Map of ledger objects to their data type.
    /// These appear in ledger state data, and in the "affected nodes" section of processed transactions' metadata.
    /// </summary>
    public enum StLedgerEntryType
    {
        Any = -3,
        Child = -2,
        Invalid = -1,
        AccountRoot = 97,
        DirectoryNode = 100,
        RippleState = 114,
        Ticket = 84,
        SignerList = 83,
        Offer = 111,
        LedgerHashes = 104,
        Amendments = 102,
        FeeSettings = 115,
        Escrow = 117,
        PayChannel = 120,
        DepositPreauth = 112,
        Check = 67,
        Nickname = 110,
        Contract = 99,
        GeneratorMap = 103,
        NegativeUNL = 78,
    }

    /// <summary>
    /// Map of data types to their "type code" for constructing field IDs and sorting fields in canonical order.
    /// Codes below 1 should not appear in actual data;
    /// codes above 10000 represent special "high-level" object types such as "Transaction" that cannot be serialized inside other objects.
    /// See the Type List for details of how to serialize each type.
    /// </summary>
    public enum StTypeCode
    {
        Validation = 10003,
        Done = -1,
        Hash128 = 4,
        Blob = 7,
        AccountID = 8,
        Amount = 6,
        Hash256 = 5,
        UInt8 = 16,
        Vector256 = 19,
        Object = 14,
        Unknown = -2,
        Transaction = 10001,
        Hash160 = 17,
        PathSet = 18,
        LedgerEntry = 10002,
        UInt16 = 1,
        NotPresent = 0,
        UInt64 = 3,
        UInt32 = 2,
        Array = 15,
    }

    public enum StAccountIDFieldCode
    {
        Account = 1,
        Authorize = 5,
        Destination = 3,
        Issuer = 4,
        Owner = 2,
        RegularKey = 8,
        Target = 7,
        Unauthorize = 6,
    }

    public enum StAmountFieldCode
    {
        Amount = 1,
        Balance = 2,
        DeliverMin = 10,
        DeliveredAmount = 18,
        Fee = 8,
        HighLimit = 7,
        LimitAmount = 3,
        LowLimit = 6,
        MinimumOffer = 16,
        RippleEscrow = 17,
        SendMax = 9,
        TakerGets = 5,
        TakerPays = 4,
        taker_gets_funded = 258,
        taker_pays_funded = 259,
    }

    public enum StArrayFieldCode
    {
        AffectedNodes = 8,
        ArrayEndMarker = 1,
        DisabledValidators = 17,
        Majorities = 16,
        Memos = 9,
        Necessary = 6,
        SignerEntries = 4,
        Signers = 3,
        Sufficient = 7,
        Template = 5,
    }

    public enum StBlobFieldCode
    {
        Condition = 17,
        CreateCode = 11,
        Domain = 7,
        ExpireCode = 10,
        Fulfillment = 16,
        FundCode = 8,
        Generator = 5,
        MasterSignature = 18,
        MemoData = 13,
        MemoFormat = 14,
        MemoType = 12,
        MessageKey = 2,
        PublicKey = 1,
        RemoveCode = 9,
        Signature = 6,
        SigningPubKey = 3,
        TxnSignature = 4,
        UNLModifyValidator = 19,
        ValidatorToDisable = 20,
        ValidatorToReEnable = 20,
    }

    public enum StHash128FieldCode
    {
        EmailHash = 1,
    }

    public enum StHash160FieldCode
    {
        TakerGetsCurrency = 3,
        TakerGetsIssuer = 4,
        TakerPaysCurrency = 1,
        TakerPaysIssuer = 2,
    }

    public enum StHash256FieldCode
    {
        AccountHash = 4,
        AccountTxnID = 9,
        Amendment = 19,
        BookDirectory = 16,
        Channel = 22,
        CheckID = 24,
        ConsensusHash = 23,
        Digest = 21,
        InvoiceID = 17,
        LedgerHash = 1,
        LedgerIndex = 6,
        Nickname = 18,
        ParentHash = 2,
        PreviousTxnID = 5,
        RootIndex = 8,
        TicketID = 20,
        TransactionHash = 3,
        WalletLocator = 7,
        hash = 257,
        index = 258,
    }

    public enum StLedgerEntryFieldCode
    {
        LedgerEntry = 1,
    }

    public enum StObjectFieldCode
    {
        CreatedNode = 3,
        DeletedNode = 4,
        DisabledValidator = 19,
        FinalFields = 7,
        Majority = 18,
        Memo = 10,
        ModifiedNode = 5,
        NewFields = 8,
        ObjectEndMarker = 1,
        PreviousFields = 6,
        Signer = 16,
        SignerEntry = 11,
        TemplateEntry = 9,
        TransactionMetaData = 2,
    }

    public enum StPathSetFieldCode
    {
        Paths = 1,
    }

    public enum StTransactionFieldCode
    {
        Transaction = 1,
    }

    public enum StUInt16FieldCode
    {
        LedgerEntryType = 1,
        SignerWeight = 3,
        TransactionType = 2,
    }

    public enum StUInt32FieldCode
    {
        BondAmount = 23,
        CancelAfter = 36,
        ClearFlag = 34,
        CloseTime = 7,
        DestinationTag = 14,
        Expiration = 10,
        FinishAfter = 37,
        FirstLedgerSequence = 26,
        Flags = 2,
        HighQualityIn = 16,
        HighQualityOut = 17,
        LastLedgerSequence = 27,
        LedgerSequence = 6,
        LoadFee = 24,
        LowQualityIn = 18,
        LowQualityOut = 19,
        OfferSequence = 25,
        OperationLimit = 29,
        OwnerCount = 13,
        ParentCloseTime = 8,
        PreviousTxnLgrSeq = 5,
        QualityIn = 20,
        QualityOut = 21,
        ReferenceFeeUnits = 30,
        ReserveBase = 31,
        ReserveIncrement = 32,
        Sequence = 4,
        SetFlag = 33,
        SettleDelay = 39,
        SignerListID = 38,
        SignerQuorum = 35,
        SigningTime = 9,
        SourceTag = 3,
        StampEscrow = 22,
        TicketCount = 40,
        TicketSequence = 41,
        TransactionIndex = 28,
        TransferRate = 11,
        WalletSize = 12,
    }

    public enum StUInt64FieldCode
    {
        BaseFee = 5,
        BookNode = 3,
        DestinationNode = 9,
        ExchangeRate = 6,
        HighNode = 8,
        IndexNext = 1,
        IndexPrevious = 2,
        LowNode = 7,
        OwnerNode = 4,
    }

    public enum StUInt8FieldCode
    {
        CloseResolution = 1,
        Method = 2,
        TickSize = 16,
        TransactionResult = 3,
        UNLModifyDisabling = 17,
    }

    public enum StUnknownFieldCode
    {
        Generic = 0,
        Invalid = -1,
    }

    public enum StValidationFieldCode
    {
        Validation = 1,
    }

    public enum StVector256FieldCode
    {
        Amendments = 3,
        Hashes = 2,
        Indexes = 1,
    }

    public partial struct StFieldId
    {
        public static readonly StFieldId AccountID_Account = new StFieldId(StTypeCode.AccountID, 1);
        public static readonly StFieldId AccountID_Authorize = new StFieldId(StTypeCode.AccountID, 5);
        public static readonly StFieldId AccountID_Destination = new StFieldId(StTypeCode.AccountID, 3);
        public static readonly StFieldId AccountID_Issuer = new StFieldId(StTypeCode.AccountID, 4);
        public static readonly StFieldId AccountID_Owner = new StFieldId(StTypeCode.AccountID, 2);
        public static readonly StFieldId AccountID_RegularKey = new StFieldId(StTypeCode.AccountID, 8);
        public static readonly StFieldId AccountID_Target = new StFieldId(StTypeCode.AccountID, 7);
        public static readonly StFieldId AccountID_Unauthorize = new StFieldId(StTypeCode.AccountID, 6);

        public static readonly StFieldId Amount_Amount = new StFieldId(StTypeCode.Amount, 1);
        public static readonly StFieldId Amount_Balance = new StFieldId(StTypeCode.Amount, 2);
        public static readonly StFieldId Amount_DeliverMin = new StFieldId(StTypeCode.Amount, 10);
        public static readonly StFieldId Amount_DeliveredAmount = new StFieldId(StTypeCode.Amount, 18);
        public static readonly StFieldId Amount_Fee = new StFieldId(StTypeCode.Amount, 8);
        public static readonly StFieldId Amount_HighLimit = new StFieldId(StTypeCode.Amount, 7);
        public static readonly StFieldId Amount_LimitAmount = new StFieldId(StTypeCode.Amount, 3);
        public static readonly StFieldId Amount_LowLimit = new StFieldId(StTypeCode.Amount, 6);
        public static readonly StFieldId Amount_MinimumOffer = new StFieldId(StTypeCode.Amount, 16);
        public static readonly StFieldId Amount_RippleEscrow = new StFieldId(StTypeCode.Amount, 17);
        public static readonly StFieldId Amount_SendMax = new StFieldId(StTypeCode.Amount, 9);
        public static readonly StFieldId Amount_TakerGets = new StFieldId(StTypeCode.Amount, 5);
        public static readonly StFieldId Amount_TakerPays = new StFieldId(StTypeCode.Amount, 4);
        public static readonly StFieldId Amount_taker_gets_funded = new StFieldId(StTypeCode.Amount, 258);
        public static readonly StFieldId Amount_taker_pays_funded = new StFieldId(StTypeCode.Amount, 259);

        public static readonly StFieldId Array_AffectedNodes = new StFieldId(StTypeCode.Array, 8);
        public static readonly StFieldId Array_ArrayEndMarker = new StFieldId(StTypeCode.Array, 1);
        public static readonly StFieldId Array_DisabledValidators = new StFieldId(StTypeCode.Array, 17);
        public static readonly StFieldId Array_Majorities = new StFieldId(StTypeCode.Array, 16);
        public static readonly StFieldId Array_Memos = new StFieldId(StTypeCode.Array, 9);
        public static readonly StFieldId Array_Necessary = new StFieldId(StTypeCode.Array, 6);
        public static readonly StFieldId Array_SignerEntries = new StFieldId(StTypeCode.Array, 4);
        public static readonly StFieldId Array_Signers = new StFieldId(StTypeCode.Array, 3);
        public static readonly StFieldId Array_Sufficient = new StFieldId(StTypeCode.Array, 7);
        public static readonly StFieldId Array_Template = new StFieldId(StTypeCode.Array, 5);

        public static readonly StFieldId Blob_Condition = new StFieldId(StTypeCode.Blob, 17);
        public static readonly StFieldId Blob_CreateCode = new StFieldId(StTypeCode.Blob, 11);
        public static readonly StFieldId Blob_Domain = new StFieldId(StTypeCode.Blob, 7);
        public static readonly StFieldId Blob_ExpireCode = new StFieldId(StTypeCode.Blob, 10);
        public static readonly StFieldId Blob_Fulfillment = new StFieldId(StTypeCode.Blob, 16);
        public static readonly StFieldId Blob_FundCode = new StFieldId(StTypeCode.Blob, 8);
        public static readonly StFieldId Blob_Generator = new StFieldId(StTypeCode.Blob, 5);
        public static readonly StFieldId Blob_MasterSignature = new StFieldId(StTypeCode.Blob, 18);
        public static readonly StFieldId Blob_MemoData = new StFieldId(StTypeCode.Blob, 13);
        public static readonly StFieldId Blob_MemoFormat = new StFieldId(StTypeCode.Blob, 14);
        public static readonly StFieldId Blob_MemoType = new StFieldId(StTypeCode.Blob, 12);
        public static readonly StFieldId Blob_MessageKey = new StFieldId(StTypeCode.Blob, 2);
        public static readonly StFieldId Blob_PublicKey = new StFieldId(StTypeCode.Blob, 1);
        public static readonly StFieldId Blob_RemoveCode = new StFieldId(StTypeCode.Blob, 9);
        public static readonly StFieldId Blob_Signature = new StFieldId(StTypeCode.Blob, 6);
        public static readonly StFieldId Blob_SigningPubKey = new StFieldId(StTypeCode.Blob, 3);
        public static readonly StFieldId Blob_TxnSignature = new StFieldId(StTypeCode.Blob, 4);
        public static readonly StFieldId Blob_UNLModifyValidator = new StFieldId(StTypeCode.Blob, 19);
        public static readonly StFieldId Blob_ValidatorToDisable = new StFieldId(StTypeCode.Blob, 20);
        public static readonly StFieldId Blob_ValidatorToReEnable = new StFieldId(StTypeCode.Blob, 20);

        public static readonly StFieldId Hash128_EmailHash = new StFieldId(StTypeCode.Hash128, 1);

        public static readonly StFieldId Hash160_TakerGetsCurrency = new StFieldId(StTypeCode.Hash160, 3);
        public static readonly StFieldId Hash160_TakerGetsIssuer = new StFieldId(StTypeCode.Hash160, 4);
        public static readonly StFieldId Hash160_TakerPaysCurrency = new StFieldId(StTypeCode.Hash160, 1);
        public static readonly StFieldId Hash160_TakerPaysIssuer = new StFieldId(StTypeCode.Hash160, 2);

        public static readonly StFieldId Hash256_AccountHash = new StFieldId(StTypeCode.Hash256, 4);
        public static readonly StFieldId Hash256_AccountTxnID = new StFieldId(StTypeCode.Hash256, 9);
        public static readonly StFieldId Hash256_Amendment = new StFieldId(StTypeCode.Hash256, 19);
        public static readonly StFieldId Hash256_BookDirectory = new StFieldId(StTypeCode.Hash256, 16);
        public static readonly StFieldId Hash256_Channel = new StFieldId(StTypeCode.Hash256, 22);
        public static readonly StFieldId Hash256_CheckID = new StFieldId(StTypeCode.Hash256, 24);
        public static readonly StFieldId Hash256_ConsensusHash = new StFieldId(StTypeCode.Hash256, 23);
        public static readonly StFieldId Hash256_Digest = new StFieldId(StTypeCode.Hash256, 21);
        public static readonly StFieldId Hash256_InvoiceID = new StFieldId(StTypeCode.Hash256, 17);
        public static readonly StFieldId Hash256_LedgerHash = new StFieldId(StTypeCode.Hash256, 1);
        public static readonly StFieldId Hash256_LedgerIndex = new StFieldId(StTypeCode.Hash256, 6);
        public static readonly StFieldId Hash256_Nickname = new StFieldId(StTypeCode.Hash256, 18);
        public static readonly StFieldId Hash256_ParentHash = new StFieldId(StTypeCode.Hash256, 2);
        public static readonly StFieldId Hash256_PreviousTxnID = new StFieldId(StTypeCode.Hash256, 5);
        public static readonly StFieldId Hash256_RootIndex = new StFieldId(StTypeCode.Hash256, 8);
        public static readonly StFieldId Hash256_TicketID = new StFieldId(StTypeCode.Hash256, 20);
        public static readonly StFieldId Hash256_TransactionHash = new StFieldId(StTypeCode.Hash256, 3);
        public static readonly StFieldId Hash256_WalletLocator = new StFieldId(StTypeCode.Hash256, 7);
        public static readonly StFieldId Hash256_hash = new StFieldId(StTypeCode.Hash256, 257);
        public static readonly StFieldId Hash256_index = new StFieldId(StTypeCode.Hash256, 258);

        public static readonly StFieldId LedgerEntry_LedgerEntry = new StFieldId(StTypeCode.LedgerEntry, 1);

        public static readonly StFieldId Object_CreatedNode = new StFieldId(StTypeCode.Object, 3);
        public static readonly StFieldId Object_DeletedNode = new StFieldId(StTypeCode.Object, 4);
        public static readonly StFieldId Object_DisabledValidator = new StFieldId(StTypeCode.Object, 19);
        public static readonly StFieldId Object_FinalFields = new StFieldId(StTypeCode.Object, 7);
        public static readonly StFieldId Object_Majority = new StFieldId(StTypeCode.Object, 18);
        public static readonly StFieldId Object_Memo = new StFieldId(StTypeCode.Object, 10);
        public static readonly StFieldId Object_ModifiedNode = new StFieldId(StTypeCode.Object, 5);
        public static readonly StFieldId Object_NewFields = new StFieldId(StTypeCode.Object, 8);
        public static readonly StFieldId Object_ObjectEndMarker = new StFieldId(StTypeCode.Object, 1);
        public static readonly StFieldId Object_PreviousFields = new StFieldId(StTypeCode.Object, 6);
        public static readonly StFieldId Object_Signer = new StFieldId(StTypeCode.Object, 16);
        public static readonly StFieldId Object_SignerEntry = new StFieldId(StTypeCode.Object, 11);
        public static readonly StFieldId Object_TemplateEntry = new StFieldId(StTypeCode.Object, 9);
        public static readonly StFieldId Object_TransactionMetaData = new StFieldId(StTypeCode.Object, 2);

        public static readonly StFieldId PathSet_Paths = new StFieldId(StTypeCode.PathSet, 1);

        public static readonly StFieldId Transaction_Transaction = new StFieldId(StTypeCode.Transaction, 1);

        public static readonly StFieldId UInt16_LedgerEntryType = new StFieldId(StTypeCode.UInt16, 1);
        public static readonly StFieldId UInt16_SignerWeight = new StFieldId(StTypeCode.UInt16, 3);
        public static readonly StFieldId UInt16_TransactionType = new StFieldId(StTypeCode.UInt16, 2);

        public static readonly StFieldId UInt32_BondAmount = new StFieldId(StTypeCode.UInt32, 23);
        public static readonly StFieldId UInt32_CancelAfter = new StFieldId(StTypeCode.UInt32, 36);
        public static readonly StFieldId UInt32_ClearFlag = new StFieldId(StTypeCode.UInt32, 34);
        public static readonly StFieldId UInt32_CloseTime = new StFieldId(StTypeCode.UInt32, 7);
        public static readonly StFieldId UInt32_DestinationTag = new StFieldId(StTypeCode.UInt32, 14);
        public static readonly StFieldId UInt32_Expiration = new StFieldId(StTypeCode.UInt32, 10);
        public static readonly StFieldId UInt32_FinishAfter = new StFieldId(StTypeCode.UInt32, 37);
        public static readonly StFieldId UInt32_FirstLedgerSequence = new StFieldId(StTypeCode.UInt32, 26);
        public static readonly StFieldId UInt32_Flags = new StFieldId(StTypeCode.UInt32, 2);
        public static readonly StFieldId UInt32_HighQualityIn = new StFieldId(StTypeCode.UInt32, 16);
        public static readonly StFieldId UInt32_HighQualityOut = new StFieldId(StTypeCode.UInt32, 17);
        public static readonly StFieldId UInt32_LastLedgerSequence = new StFieldId(StTypeCode.UInt32, 27);
        public static readonly StFieldId UInt32_LedgerSequence = new StFieldId(StTypeCode.UInt32, 6);
        public static readonly StFieldId UInt32_LoadFee = new StFieldId(StTypeCode.UInt32, 24);
        public static readonly StFieldId UInt32_LowQualityIn = new StFieldId(StTypeCode.UInt32, 18);
        public static readonly StFieldId UInt32_LowQualityOut = new StFieldId(StTypeCode.UInt32, 19);
        public static readonly StFieldId UInt32_OfferSequence = new StFieldId(StTypeCode.UInt32, 25);
        public static readonly StFieldId UInt32_OperationLimit = new StFieldId(StTypeCode.UInt32, 29);
        public static readonly StFieldId UInt32_OwnerCount = new StFieldId(StTypeCode.UInt32, 13);
        public static readonly StFieldId UInt32_ParentCloseTime = new StFieldId(StTypeCode.UInt32, 8);
        public static readonly StFieldId UInt32_PreviousTxnLgrSeq = new StFieldId(StTypeCode.UInt32, 5);
        public static readonly StFieldId UInt32_QualityIn = new StFieldId(StTypeCode.UInt32, 20);
        public static readonly StFieldId UInt32_QualityOut = new StFieldId(StTypeCode.UInt32, 21);
        public static readonly StFieldId UInt32_ReferenceFeeUnits = new StFieldId(StTypeCode.UInt32, 30);
        public static readonly StFieldId UInt32_ReserveBase = new StFieldId(StTypeCode.UInt32, 31);
        public static readonly StFieldId UInt32_ReserveIncrement = new StFieldId(StTypeCode.UInt32, 32);
        public static readonly StFieldId UInt32_Sequence = new StFieldId(StTypeCode.UInt32, 4);
        public static readonly StFieldId UInt32_SetFlag = new StFieldId(StTypeCode.UInt32, 33);
        public static readonly StFieldId UInt32_SettleDelay = new StFieldId(StTypeCode.UInt32, 39);
        public static readonly StFieldId UInt32_SignerListID = new StFieldId(StTypeCode.UInt32, 38);
        public static readonly StFieldId UInt32_SignerQuorum = new StFieldId(StTypeCode.UInt32, 35);
        public static readonly StFieldId UInt32_SigningTime = new StFieldId(StTypeCode.UInt32, 9);
        public static readonly StFieldId UInt32_SourceTag = new StFieldId(StTypeCode.UInt32, 3);
        public static readonly StFieldId UInt32_StampEscrow = new StFieldId(StTypeCode.UInt32, 22);
        public static readonly StFieldId UInt32_TicketCount = new StFieldId(StTypeCode.UInt32, 40);
        public static readonly StFieldId UInt32_TicketSequence = new StFieldId(StTypeCode.UInt32, 41);
        public static readonly StFieldId UInt32_TransactionIndex = new StFieldId(StTypeCode.UInt32, 28);
        public static readonly StFieldId UInt32_TransferRate = new StFieldId(StTypeCode.UInt32, 11);
        public static readonly StFieldId UInt32_WalletSize = new StFieldId(StTypeCode.UInt32, 12);

        public static readonly StFieldId UInt64_BaseFee = new StFieldId(StTypeCode.UInt64, 5);
        public static readonly StFieldId UInt64_BookNode = new StFieldId(StTypeCode.UInt64, 3);
        public static readonly StFieldId UInt64_DestinationNode = new StFieldId(StTypeCode.UInt64, 9);
        public static readonly StFieldId UInt64_ExchangeRate = new StFieldId(StTypeCode.UInt64, 6);
        public static readonly StFieldId UInt64_HighNode = new StFieldId(StTypeCode.UInt64, 8);
        public static readonly StFieldId UInt64_IndexNext = new StFieldId(StTypeCode.UInt64, 1);
        public static readonly StFieldId UInt64_IndexPrevious = new StFieldId(StTypeCode.UInt64, 2);
        public static readonly StFieldId UInt64_LowNode = new StFieldId(StTypeCode.UInt64, 7);
        public static readonly StFieldId UInt64_OwnerNode = new StFieldId(StTypeCode.UInt64, 4);

        public static readonly StFieldId UInt8_CloseResolution = new StFieldId(StTypeCode.UInt8, 1);
        public static readonly StFieldId UInt8_Method = new StFieldId(StTypeCode.UInt8, 2);
        public static readonly StFieldId UInt8_TickSize = new StFieldId(StTypeCode.UInt8, 16);
        public static readonly StFieldId UInt8_TransactionResult = new StFieldId(StTypeCode.UInt8, 3);
        public static readonly StFieldId UInt8_UNLModifyDisabling = new StFieldId(StTypeCode.UInt8, 17);

        public static readonly StFieldId Unknown_Generic = new StFieldId(StTypeCode.Unknown, 0);
        public static readonly StFieldId Unknown_Invalid = new StFieldId(StTypeCode.Unknown, 4294967295);

        public static readonly StFieldId Validation_Validation = new StFieldId(StTypeCode.Validation, 1);

        public static readonly StFieldId Vector256_Amendments = new StFieldId(StTypeCode.Vector256, 3);
        public static readonly StFieldId Vector256_Hashes = new StFieldId(StTypeCode.Vector256, 2);
        public static readonly StFieldId Vector256_Indexes = new StFieldId(StTypeCode.Vector256, 1);

    }

}

